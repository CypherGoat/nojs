package views

import (
    "fmt"
    "github.com/CypherGoat/web/cmd/api"
    "strings"
)
templ EstimateCard(offers []api.Estimate) {
     <style>
        body {
            background-color: #1c1c1c;
            font-family: 'Arial', sans-serif;
        }

        .container {
    max-width: 700px;
    height: auto;
    margin: 0 auto;
    padding: 1rem;
    color: #f5f5f5;
    align-items: center;
}

         .card {
        background: #2c2c2c;
        border-radius: 16px;
        padding: 2rem;
        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.5);
        transition: box-shadow 0.3s ease;
    }

    .card:hover {
        box-shadow: 0 16px 48px rgba(0, 0, 0, 0.6);
    }

        .card:hover {
            box-shadow: 0 16px 48px rgba(0, 0, 0, 0.6);
        }

        .estimate-details {
            display: flex;
            justify-content: space-between;
            align-items: center;
            font-size: 1rem;
            margin-bottom: 1rem;
        }

        .amount-highlight {
            font-size: 1.5rem;
            font-weight: 700;
            color: #ffffff;
            text-align: right;
        }

        .btn-select {
            background: linear-gradient(45deg, #ff0054, #00bfff, #7dff00, #ff9800);
            background-size: 400% 400%;
            color: #fff;
            padding: 0.75rem;
            border: none;
            border-radius: 8px;
            font-size: 1.1rem;
            font-weight: 600;
            cursor: pointer;
            width: 100%;
            transition: transform 0.2s ease, box-shadow 0.3s ease;
            background-clip: padding-box;
            text-align: center;
            border: 2px solid transparent;
        }

        .btn-select2 {
            background-color: #4a4a4a;
            color: #fff;
            padding: 0.75rem;
            border: none;
            border-radius: 8px;
            font-size: 1.1rem;
            font-weight: 600;
            cursor: pointer;
            width: 100%;
            text-align: center;
            border: 2px solid transparent;
        }

        .btn-select:hover, .btn-select2:hover {
            transform: scale(1.05);
        }

        .btn-select:focus, .btn-select2:focus {
            outline: none;
            box-shadow: 0 0 0 3px rgba(74, 84, 241, 0.5);
        }

        .popup {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            justify-content: center;
            align-items: center;
        }

        .popup-content {
            background: #2c2c2c;
            padding: 2rem;
            border-radius: 8px;
            width: 80%;
            max-width: 400px;
            position: relative;
        }

        .popup-content input {
            width: 100%;
            padding: 0.75rem;
            margin-bottom: 1rem;
            border: 1px solid #ffffff;
            border-radius: 4px;
            color: #ffffff;
            background: #3a3a3a;
        }

        .popup-content button {
            background: linear-gradient(45deg, #ff0054, #00bfff, #7dff00, #ff9800);
            background-size: 400% 400%;
            color: #fff;
            padding: 0.75rem;
            border: none;
            border-radius: 8px;
            font-size: 1.1rem;
            font-weight: 600;
            cursor: pointer;
            width: 100%;
            transition: transform 0.2s ease, box-shadow 0.3s ease;
            background-clip: padding-box;
            text-align: center;
        }

        .popup-content button:hover {
            transform: scale(1.05);
        }

        .popup-content .close {
            position: absolute;
            top: 10px;
            right: 10px;
            cursor: pointer;
            font-size: 1.5rem;
            color: #ffffff;
        }

        .btn-primary {
            background: linear-gradient(45deg, #00bfff, #1e90ff, #4682b4, #0000ff);
            background-size: 400% 400%;
            color: #fff;
            padding: 0.75rem;
            border: none;
            border-radius: 12px;
            font-size: 1.1rem;
            font-weight: 700;
            cursor: pointer;
            width: 100%;
            transition: transform 0.2s ease, box-shadow 0.3s ease;
            background-clip: padding-box;
            position: relative;
            animation: rgbAnimation 10s ease infinite;
        }

        .estimate-image {
                max-width: 100px;
                max-height: 100px;
            }


        @media (max-width: 768px) {

            .card {
                padding: 1rem;
            }

            .estimate-details {
                flex-direction: row;
                align-items: center;
                justify-content: space-between;
            }

            .amount-highlight {
                font-size: 1.25rem;
                text-align: left;
                margin-bottom: 0;
                width: 70%;
            }

            .estimate-details > div:last-child {
                width: 30%;
                display: flex;
                justify-content: flex-end;
            }

            .estimate-image {
                max-width: 80px;
                max-height: 80px;
            }

            .btn-select, .btn-select2 {
                font-size: 1rem;
                padding: 0.5rem;
            }

            .popup-content {
                width: 90%;
                max-width: 300px;
            }
        }

        .kyc-badge {
            min-width: 24px;
            height: 24px;
            text-align: center;
            line-height: 24px;
            border-radius: 50%;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
            font-size: 0.8rem;
            font-weight: bold;
            margin-left: 0.5rem;
            position: relative;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            cursor: help;
            vertical-align: middle;
        }
        
        .kyc-badge::after {
            content: attr(data-tooltip);
            position: absolute;
            bottom: 130%;
            left: 50%;
            transform: translateX(-50%);
            background-color: #333;
            color: white;
            padding: 0.5rem;
            border-radius: 6px;
            width: max-content;
            max-width: 200px;
            font-size: 0.75rem;
            opacity: 0;
            visibility: hidden;
            transition: all 0.3s ease;
            pointer-events: none;
            z-index: 100;
        }
        
        .kyc-badge:hover::after {
            opacity: 1;
            visibility: visible;
        }
        
        .kyc-0 {
            background: linear-gradient(145deg, #2ecc71, #27ae60);
            color: white;
        }
        
        .kyc-1 {
            background: linear-gradient(145deg, #7ed56f, #55c57a);
            color: #333;
        }
        
        .kyc-2 {
            background: linear-gradient(145deg, #ffeb3b, #fdd835);
            color: #333;
        }
        
        .sort-options {
            display: flex;
            justify-content: flex-end;
            margin-bottom: 1rem;
            gap: 0.5rem;
        }
        
        .sort-btn {
            background-color: #3a3a3a;
            color: #fff;
            border: 1px solid #555;
            border-radius: 4px;
            padding: 0.5rem 1rem;
            cursor: pointer;
            font-size: 0.9rem;
            transition: background-color 0.2s ease;
        }
        
        .sort-btn.active {
            background-color: #555;
            border-color: #777;
        }
        
        .sort-btn:hover {
            background-color: #444;
        }

        .kyc-badge {
            display: none;
        }

        .show-kyc .kyc-badge {
            display: inline-flex;
        }
    </style>
    <div class="container">
<div class="sort-options">
    <button id="sort-rate" class="sort-btn active" type="button">Sort by Rate</button>
    <button id="sort-kyc" class="sort-btn" type="button">Sort by KYC</button>
</div>
        
<div id="estimates-container">
for i, offer := range offers {
        if !(offer.SendAmount == 0) {
            <form method="GET" action="/step2" class="estimate-form" data-kyc={ fmt.Sprintf("%d", offer.KYCScore) } data-rate={ fmt.Sprintf("%f", offer.ReceiveAmount) } data-is-top={ fmt.Sprintf("%t", i == 0) }>
                <input type="hidden" name="coin1" value={ offer.Coin1 }>
                <input type="hidden" name="coin2" value={ offer.Coin2 }>
                <input type="hidden" name="network1" value={ offer.Network1 }>
                <input type="hidden" name="network2" value={ offer.Network2 }>
                <input type="hidden" name="amount" value={ fmt.Sprintf("%f", offer.SendAmount) }>
                <input type="hidden" name="receiveamount" value={ fmt.Sprintf("%v", offer.ReceiveAmount) }>
                <input type="hidden" name="partner" value={ offer.ExchangeName }>
                <div class="card border-green-500 p-4">
                    <h2 class="text-5xl font-bold text-center text-white mb-6">
                        { offer.ExchangeName }
                        if offer.KYCScore == 0 {
                            <span class="kyc-badge kyc-0" data-tooltip={ fmt.Sprintf("Exchange never asks for KYC. %s", LogText(offer.Log) ) }>0</span>
                        } else if offer.KYCScore == 1 {
                            <span class="kyc-badge kyc-1" data-tooltip={ fmt.Sprintf("Exchange may ask for KYC very rarely or never. %s", LogText(offer.Log)) }>1</span>
                        } else {
                            <span class="kyc-badge kyc-2" data-tooltip={ fmt.Sprintf("Exchange may rarely ask for KYC. %s", LogText(offer.Log)) }>2</span>
                        }
                    </h2>
                    <div class="estimate-details">
                        <div class="amount-highlight">
                            { fmt.Sprintf("%f", offer.ReceiveAmount) } { strings.ToUpper(offer.Coin2) }
                        </div>
                        <div>
                            <img src={ offer.ImageURL } alt="{ offer.ExchangeName }" class="estimate-image">
                        </div>
                    </div>
                    if i == 0 {
                        <button class="btn-select2 btn-primary" type="submit">Select</button>
                    } else {
                        <button class="btn-select2" type="submit">Select</button>
                    }
                </div>
            </form>
            <br/>
        }
    }
</div>
    </div>
<script>
    (function() {
        const getSortPreference = () => sessionStorage.getItem('sortPreference') || 'rate';
        const setSortPreference = (pref) => sessionStorage.setItem('sortPreference', pref);
        
        function initSorting() {
            const sortBy = getSortPreference();
            updateActiveButton(sortBy);
            sortEstimates(sortBy, false); 
        }
        
        function updateActiveButton(sortBy) {
            document.querySelectorAll('.sort-btn').forEach(btn => {
                btn.classList.remove('active');
            });
            
            const buttonId = sortBy === 'kyc' ? 'sort-kyc' : 'sort-rate';
            const button = document.getElementById(buttonId);
            if (button) button.classList.add('active');
            
            const container = document.getElementById('estimates-container');
            if (sortBy === 'kyc') {
                container.classList.add('show-kyc');
            } else {
                container.classList.remove('show-kyc');
            }
        }
        
        document.querySelectorAll('.sort-btn').forEach(btn => {
            btn.addEventListener('click', function(e) {
                e.preventDefault();
                const sortBy = this.id === 'sort-kyc' ? 'kyc' : 'rate';
                sortEstimates(sortBy, true); 
            });
        });
        
        function sortEstimates(sortBy, updateStorage) {
            if (updateStorage) {
                setSortPreference(sortBy);
            }
            
            updateActiveButton(sortBy);
            
            const container = document.getElementById('estimates-container');
            if (!container) return;
            
            const children = Array.from(container.children);
            const forms = children.filter(el => el.classList.contains('estimate-form'));
            
            while (container.firstChild) {
                container.removeChild(container.firstChild);
            }
            
            forms.sort((a, b) => {
                if (sortBy === 'kyc') {
                    return parseInt(a.dataset.kyc) - parseInt(b.dataset.kyc);
                } else {
                    return parseFloat(b.dataset.rate) - parseFloat(a.dataset.rate);
                }
            });
            
            forms.forEach((form, index) => {
                const button = form.querySelector('button');
                if (index === 0) {
                    button.className = 'btn-select2 btn-primary';
                } else {
                    button.className = 'btn-select2';
                }
                
                container.appendChild(form);
                
                if (index < forms.length - 1) {
                    const br = document.createElement('br');
                    container.appendChild(br);
                }
            });
        }
        
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', initSorting);
        } else {
            initSorting();
        }
        
        document.addEventListener('htmx:afterSwap', function() {
            initSorting();
        });
    })();
</script>
}

func LogText(log bool) string {
    if log {
        return "Exchange requires IP logging"
    }
    return "Exchange does not require IP logging"
}