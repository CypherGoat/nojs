package views

import(
    "github.com/CypherGoat/nojs/cmd/api"
    "fmt"
    "strings"
    "strconv"
)

func FormatFloat(num float64) string {
    str := strconv.FormatFloat(num, 'f', -1, 64)
    
    if !strings.Contains(str, ".") {
        return str + ".0"
    }
    
    return str
}


templ EstimateTempl(errors string, estimate []api.Estimate, sort string, baseQuery string){        <style>
        html, body {
            height: 100%;
            margin: 0;
            scroll-behavior: smooth;
        }

        body {
            background-color: #121520;
            font-family: 'Inter', 'Segoe UI', 'Arial', sans-serif;
            min-height: 100vh;
            display: flex;
            flex-direction: column;
        }

        .main-content {
            flex-grow: 1;
        }

        footer {
            margin-top: auto;
        }

        .container {
            max-width: 700px;
            height: auto;
            margin: 0 auto;
            padding: 1rem;
            color: #f5f5f5;
            align-items: center;
        }

        .container2 {
            max-width:90%;
            height: auto;
            margin: 2rem auto;
            padding: 1rem;
            color: #f5f5f5;
            align-items: center;
        }

        .container3 {
            max-width:70%;
            height: auto;
            margin: 2rem auto;
            padding: 1rem;
            color: #f5f5f5;
            align-items: center;
        }

        .error-message {
            background-color: #f8d7da;
            border-color: #f5c6cb;
            color: #721c24;
            padding: 0.75rem 1.25rem;
            margin-bottom: 1rem;
            border: 1px solid transparent;
            border-radius: 0.25rem;
        }

        h1 {
            font-size: 2.5rem;
            font-weight: 700;
            color: #ffffff;
            text-align: center;
            margin-bottom: 1rem;
        }

        h2 {
            font-size: 1.75rem;
            font-weight: 500;
            color: #cccccc;
            text-align: center;
            margin-bottom: 2rem;
        }

        #estimates-container {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            width: 100%;
        }

        .estimate-form {
            width: 100%;
            max-width: 600px;
            margin: 0 auto;
        }

        .card {
            background: linear-gradient(145deg, #1a1f2e, #222633);
            border-radius: 16px;
            padding: 2rem;
            box-shadow: 0 10px 40px rgba(0, 0, 0, 0.3), 0 2px 6px rgba(0, 102, 204, 0.07);
            transition: box-shadow 0.3s ease, transform 0.3s ease;
            border: 1px solid rgba(255, 255, 255, 0.05);
            width: 100%;
            max-width: 600px;
        }

        .card:hover {
            box-shadow: 0 16px 48px rgba(0, 0, 0, 0.4), 0 3px 10px rgba(0, 102, 204, 0.1);
            transform: translateY(-2px);
        }

        .estimate-details {
            display: flex;
            justify-content: space-between;
            align-items: center;
            font-size: 1rem;
            margin-bottom: 1rem;
        }

        .amount-highlight {
            font-size: 1.5rem;
            font-weight: 700;
            color: #ffffff;
            text-align: right;
        }

        .estimate-image {
            max-width: 100px;
            max-height: 100px;
        }

        .btn-select {
            background: linear-gradient(135deg, #0088ff, #0055cc);
            color: #fff;
            padding: 0.75rem;
            border: none;
            border-radius: 12px;
            font-size: 1.1rem;
            font-weight: 600;
            cursor: pointer;
            width: 100%;
            transition: transform 0.2s ease, box-shadow 0.3s ease;
            text-align: center;
        }

        .btn-select2 {
            background-color: #4a4a4a;
            color: #fff;
            padding: 0.75rem;
            border: none;
            border-radius: 8px;
            font-size: 1.1rem;
            font-weight: 600;
            cursor: pointer;
            width: 100%;
            text-align: center;
            border: 2px solid transparent;
            transition: transform 0.2s ease, box-shadow 0.3s ease;
        }

        .btn-select:hover, .btn-select2:hover {
            transform: scale(1.05);
        }

        .btn-select:focus, .btn-select2:focus {
            outline: none;
            box-shadow: 0 0 0 3px rgba(74, 84, 241, 0.5);
        }
        
        .btn-primary {
            background: linear-gradient(135deg, #0088ff, #0055cc);
            color: #ffffff;
            padding: 0.75rem;
            border: none;
            border-radius: 12px;
            font-size: 1.1rem;
            font-weight: 700;
            cursor: pointer;
            width: 100%;
            transition: transform 0.2s ease, box-shadow 0.3s ease, background 0.3s ease;
            background-clip: padding-box;
            position: relative;
            text-shadow: 0 1px 2px rgba(0, 0, 0, 0.2);
            box-shadow: 0 4px 12px rgba(0, 102, 204, 0.25);
        }

        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 16px rgba(0, 102, 204, 0.35);
            background: linear-gradient(135deg, #0099ff, #0066dd);
        }

        .btn-primary:focus {
            outline: none;
            box-shadow: 0 0 0 3px rgba(0, 102, 204, 0.3), 0 4px 12px rgba(0, 102, 204, 0.25);
        }

        .rgb-effect {
            color: #0066cc;
            font-weight: 800;
        }

        @keyframes rgbAnimation {
            0% { background-position: 0% 0%; }
            50% { background-position: 100% 100%; }
            100% { background-position: 0% 0%; }
        }

        .sort-options {
            display: flex;
            justify-content: flex-end;
            margin-bottom: 1.5rem;
            gap: 0.8rem;
        }

        .sort-btn {
            background: linear-gradient(145deg, #2a2f3e, #1f2330);
            color: #cccccc;
            border: 1px solid rgba(255, 255, 255, 0.1);
            padding: 0.75rem 1.5rem;
            border-radius: 12px;
            font-size: 0.95rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
            text-transform: capitalize;
            letter-spacing: 0.5px;
        }

        .sort-btn::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.1), transparent);
            transition: left 0.5s ease;
        }

        .sort-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 24px rgba(0, 0, 0, 0.3);
            border-color: rgba(255, 255, 255, 0.2);
            color: #ffffff;
        }

        .sort-btn:hover::before {
            left: 100%;
        }

        .sort-btn.active {
            background: linear-gradient(135deg, #0088ff, #0055cc);
            color: #ffffff;
            border-color: rgba(0, 136, 255, 0.3);
            box-shadow: 0 4px 16px rgba(0, 136, 255, 0.3);
        }

        .sort-btn.active:hover {
            background: linear-gradient(135deg, #0099ff, #0066dd);
            box-shadow: 0 6px 20px rgba(0, 136, 255, 0.4);
        }

        .sort-btn:focus {
            outline: none;
            box-shadow: 0 0 0 3px rgba(0, 136, 255, 0.3);
        }

        .kyc-badge {
            min-width: 24px;
            height: 24px;
            text-align: center;
            line-height: 24px;
            border-radius: 50%;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
            font-size: 0.8rem;
            font-weight: bold;
            margin-left: 0.5rem;
            position: relative;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            cursor: help;
            vertical-align: middle;
        }

           .kyc-badge:hover::before {
            opacity: 1;
            visibility: visible;
        }
        
.ip-badge {
    min-width: 20px;
    height: 26px;
    text-align: center;
    font-size: 0.8rem;
    font-weight: bold;
    margin-left: 0.5rem;
    position: relative;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    cursor: help;
    vertical-align: middle;
    background: linear-gradient(145deg, #626262, #4a4545);
    color: white;
    clip-path: polygon(50% 0%, 100% 30%, 80% 100%, 20% 100%, 0% 30%);
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
    border-radius: 0;
    line-height: normal;
}

        .ip-badge::before {
            content: attr(title);
            position: absolute;
            bottom: 130%;
            left: 50%;
            transform: translateX(-50%);
            background-color: #333;
            color: white;
            padding: 0.75rem;
            border-radius: 6px;
            width: max-content;
            max-width: 300px;
            font-size: 0.75rem;
            opacity: 0;
            visibility: hidden;
            transition: opacity 0.3s ease;
            pointer-events: none;
            z-index: 100;
            white-space: normal;
            text-align: center;
            box-shadow: 0 3px 8px rgba(0, 0, 0, 0.3);
            line-height: 1.4;
        }

        .ip-badge:hover::before {
            opacity: 1;
            visibility: visible;
        }


    
        
        .kyc-badge::before {
            content: attr(title);
            position: absolute;
            bottom: 130%;
            left: 50%;
            transform: translateX(-50%);
            background-color: #333;
            color: white;
            padding: 0.75rem;
            border-radius: 6px;
            width: max-content;
            max-width: 300px;
            font-size: 0.75rem;
            opacity: 0;
            visibility: hidden;
            transition: opacity 0.3s ease;
            pointer-events: none;
            z-index: 100;
            white-space: normal; /* Changed from nowrap to normal */
            text-align: center;
            box-shadow: 0 3px 8px rgba(0, 0, 0, 0.3);
            line-height: 1.4;
        }
        
        .kyc-badge:hover::before {
            opacity: 1;
            visibility: visible;
        }
        
        .kyc-0 {
            background: linear-gradient(145deg, #2ecc71, #27ae60);
            color: white;
        }
        
        .kyc-1 {
            background: linear-gradient(145deg, #7ed56f, #55c57a);
            color: #333;
        }
        
        .kyc-2 {
            background: linear-gradient(145deg, #ffeb3b, #fdd835);
            color: #333;
        }
                .card.blocked {
            opacity: 0.6;
            background: linear-gradient(145deg, #2a2a2a, #333333);
            border: 1px solid #555;
        }

        .card.blocked .btn-select,
        .card.blocked .btn-select2 {
            background: #666;
            color: #999;
            cursor: not-allowed;
            opacity: 0.7;
        }

        .card.blocked .btn-select:hover,
        .card.blocked .btn-select2:hover {
            background: #666;
            transform: none;
            box-shadow: none;
        }

        .blocked-notice {
            background: linear-gradient(135deg, #656565, #3b3b3b);
            color: white;
            padding: 0.5rem 1rem;
            border-radius: 8px;
            font-size: 0.85rem;
            margin-top: 1rem;
            text-align: center;
        }

        @media (max-width: 768px) {
            .card {
                padding: 1.5rem;
            }

            .estimate-details {
                flex-direction: row;
                align-items: center;
                justify-content: space-between;
            }

            .amount-highlight {
                font-size: 1.25rem;
                text-align: left;
                margin-bottom: 0;
                width: 70%;
            }

            .estimate-details > div:last-child {
                width: 30%;
                display: flex;
                justify-content: flex-end;
            }

            .estimate-image {
                max-width: 80px;
                max-height: 80px;
            }

            .btn-select, .btn-select2 {
                font-size: 1rem;
                padding: 0.5rem;
            }
        }
        </style>
    @Header(){

    }    
<br/>
if errors != ""{
    <div class="error-message" role="alert">
        <span class="block sm:inline">{errors}</span>
    </div>
}

<h1>Estimates</h1>
<h2>Estimates found from our partnered exchanges:</h2>

   <div id="estimates-container">
<div class="sort-options">
    <a href={ fmt.Sprintf("?%s&sort=rate", baseQuery) } class={ "sort-btn", templ.KV("active", sort == "rate") }>Sort by Rate</a>
    <a href={ fmt.Sprintf("?%s&sort=kyc", baseQuery) } class={ "sort-btn", templ.KV("active", sort == "kyc") }>Sort by KYC</a>
</div>
        for i, est := range estimate {
            if !(est.SendAmount == 0) {
                <form method="GET" action="/step2" class="estimate-form" data-kyc={ fmt.Sprintf("%d", est.KYCScore) } data-rate={ fmt.Sprintf("%f", est.ReceiveAmount) } data-is-top={ fmt.Sprintf("%t", i == 0) }>
                    <input type="hidden" name="coin1" value={ est.Coin1 }>
                    <input type="hidden" name="coin2" value={ est.Coin2 }>
                    <input type="hidden" name="network1" value={ est.Network1 }>
                    <input type="hidden" name="network2" value={ est.Network2 }>
                    <input type="hidden" name="amount" value={ fmt.Sprintf("%f", est.SendAmount) }>
                    <input type="hidden" name="receiveamount" value={ fmt.Sprintf("%v", est.ReceiveAmount) }>
                    <input type="hidden" name="partner" value={ est.ExchangeName }>
                    <div class={ "card border-green-500 p-4", templ.KV("blocked", est.Blocked) }>
                        <h2 class="text-xl font-bold text-center mb-3 flex items-center justify-center">
                            <span class="text-white">{ est.ExchangeName }</span>
                            if est.KYCScore == 0 {
                                <span class="kyc-badge kyc-0 ml-2" title={ fmt.Sprintf("Exchange never asks for KYC.") }>0</span>
                            } else if est.KYCScore == 1 {
                                <span class="kyc-badge kyc-1 ml-2" title={ fmt.Sprintf("Exchange may ask for KYC very rarely or never.") }>1</span>
                            } else {
                                <span class="kyc-badge kyc-2 ml-2" title={ fmt.Sprintf("Exchange may rarely ask for KYC.") }>2</span>
                            }
                            if est.Log {
                                <span class="ip-badge ml-2" title={ fmt.Sprintf("Exchange requires IP logging.") }></span>
                            }
                        </h2>
                        <div class="estimate-details">
                            <div class="amount-highlight">
                                { fmt.Sprintf("%f", est.ReceiveAmount) } { strings.ToUpper(est.Coin2) }
                            </div>
                            <div>
                                <img src={ est.ImageURL } alt={ est.ExchangeName } class="estimate-image">
                            </div>
                        </div>
                        if est.Blocked {
                            <button class="btn-select2" type="button" disabled>Not Available</button>
                            <div class="blocked-notice">
                                This exchange is not available via our hidden services.
                            </div>
                        } else {
                            if i == 0 {
                                <button class="btn-select2 btn-primary" type="submit">Select</button>
                            } else {
                                <button class="btn-select2" type="submit">Select</button>
                            }
                        }
                    </div>
                </form>
                <div class="estimate-spacer" style="height: 2rem;"></div>
            }
        }
    </div>
}

func LogText(log bool) string {
    if log {
        return "Exchange requires IP logging"
    }
    return "Exchange does not require IP logging"
}